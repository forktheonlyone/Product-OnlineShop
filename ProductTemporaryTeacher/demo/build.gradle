plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// third party
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	implementation group: 'com.auth0', name: 'java-jwt', version: '4.3.0'



	runtimeOnly 'mysql:mysql-connector-java'

	implementation 'org.apache.commons:commons-lang3:3.12.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'


	/**
	 * Spring Boot에서 반응형 웹 애플리케이션을 개발할 때 사용하는 스타터 패키지입니다.
	 * 이 스타터는 Spring Framework 5에서 도입된 반응형 프로그래밍 모델을 기반으로 한 WebFlux를 포함하고 있습니다.
	 * 다음은 이 스타터 패키지의 주요 특징
	 */
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	/**
	 * Spring Boot 개발자 도구로, 개발 중에 유용한 여러 기능을 제공합니다.
	 * 예를 들어, 자동 재시작 기능은 코드가 변경될 때 애플리케이션을 자동으로 재시작해줍니다.
	 * 또한, 개발 중에 더 빠른 로딩을 위해 기본적인 캐시 설정을 비활성화하는 등의 기능을 제공합니다.
	 * developmentOnly 스코프로 지정되어 있어, 개발 단계에서만 이 라이브러리가 사용되며, 배포된 프로덕션 환경에는 포함되지 않음
	 */
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	/**
	 * MariaDB용 Java JDBC 클라이언트입니다.
	 * 이 라이브러리는 Java 애플리케이션에서 MariaDB 또는 MySQL 데이터베이스에 접근하고, 데이터를 조작할 수 있게 해줍니다.
	 * runtimeOnly 스코프는 컴파일 시에는 필요하지 않지만, 런타임에 필요한 의존성을 지정할 때 사용됩니다.
	 * 즉, 애플리케이션이 실행될 때 이 라이브러리가 필요합니다.
	 */
	//runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	/**
	 * JSTL (JavaServer Pages Standard Tag Library)은 JSP에서 사용할 수 있는 태그 라이브러리 모음입니다.
	 * JSTL을 사용하면 JSP 페이지에서 조건문, 반복문과 같은 제어문, 국제화, SQL 등을 태그 형식으로 쉽게 사용할 수 있습니다.
	 */
	implementation 'javax.servlet:jstl'


	/**
	 * 이 라이브러리는 Apache Tomcat의 JSP 엔진인 Jasper를 내장하고 있습니다.
	 * Spring Boot 애플리케이션에서 JSP 파일을 컴파일하고 실행하기 위해 필요합니다.
 	 */
	//implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

	/**
	 * json-simple은 Java에서 JSON 데이터를 파싱하고 생성하기 위한 간단하고 경량의 라이브러리입니다.
	 * 이 라이브러리를 사용하면 JSON 객체를 쉽게 읽고 쓸 수 있습니다.
	 */
	implementation 'com.googlecode.json-simple:json-simple:1.1'


	/**
	 * Apache HttpClient는 HTTP 프로토콜을 사용하여 서버와 통신하기 위한 Java 라이브러리입니다.
	 * REST API 호출, 웹 페이지 다운로드, 파일 업로드 및 다운로드 등 다양한 HTTP 기반 작업을 수행하는 데 사용됩니다.
	 */
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}








